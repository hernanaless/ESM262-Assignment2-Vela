knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(tidyverse)
library(tidyverse)
library(readr)
library(tibble)
library(plyr)
Raw_CA_Gazetteer_Dataset <- read_delim("~/Documents/Bren School Documents/3-Spring Quarter 2018/ESM262-Computing for Environmental Sciences/Assignment2/CA_Features_20180401.txt",
"|", escape_double = FALSE, trim_ws = TRUE)
View(Raw_CA_Gazetteer_Dataset)
CA_Gazetteer_NewColumns <- Raw_CA_Gazetteer_Dataset
names(CA_Gazetteer_NewColumns) <- c("ID", "Name", "Class", "State", "State_ID", "County", "County_ID", "Latitude_DMS", "Longitude_DMS", "Latitude_DEC", "Longitude_DEC", "Latitude_DMS_SRC", "Longitude_DMS_SRC", "Latitude_DEC_SRC", "Longitude_DEC_SRC", "Elevation_MTS", "Elevation_FT", "MapName", "DateCreated", "DateEdited")
View(CA_Gazetteer_NewColumns)
CA_Gazetter_SelectedColumns <- select(CA_Gazetteer_NewColumns, ID, Name, Class, State, County, Latitude_DEC, Longitude_DEC, Latitude_DEC_SRC, Longitude_DEC_SRC, Elevation_MTS, MapName, DateCreated, DateEdited)
View(CA_Gazetter_SelectedColumns)
str(CA_Gazetter_SelectedColumns)
CA_Gazetter_SelectedColumns$DateCreated <- as.Date(CA_Gazetter_SelectedColumns$DateCreated, format = "%m/%d/%Y")
CA_Gazetter_SelectedColumns$DateEdited <- as.Date(CA_Gazetter_SelectedColumns$DateEdited, format = "%m/%d/%Y")
str(CA_Gazetter_SelectedColumns)
View(CA_Gazetter_SelectedColumns)
CA_Gazetteer_CAOnly <- CA_Gazetter_SelectedColumns %>%
filter(State == "CA") %>%
filter(Latitude_DEC != "") %>%
filter(Longitude_DEC != "")
View(CA_Gazetteer_CAOnly)
install.packages("RMySQL")
library(DBI)
install.packages("dbplyr")
CA_Gazetter_DB <- DBI::dbConnect(RSQLite::SQLite(), path ="gaz.db")
library(dplyr)
CA_Gazetter_DB <- DBI::dbConnect(RSQLite::SQLite(), path ="gaz.db")
install.packages("dbplyr")
library(dplyr)
CA_Gazetter_DB <- DBI::dbConnect(RSQLite::SQLite(), path ="gaz.db")
library(DBI)
CA_Gazetter_DB <- DBI::dbConnect(RSQLite::SQLite(), path ="gaz.db")
library(tidyverse)
library(RSQLite)
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("dbplyr")
library(dplyr)
library(DBI)
CA_Gazetter_DB <- DBI::dbConnect(RSQLite::SQLite(), path ="gaz.db")
library(dplyr)
library(DBI)
CA_Gazetter_DB <- DBI::dbConnect(RSQLite::SQLite(), path ="gaz.db")
getwd()
copy_to(CA_Gazetter_DB, CA_Gazetteer_CAOnly, "Gaz",
temporary = FALSE
)
dbGetQuery(CA_Gazetter_DB, "SELECT * FROM Gaz LIMIT 10")
dbDisconnect(CA_Gazetter_DB)
getwd()
?dbConnect
?copy_to
CA_Gazetteer_CAOnly <- CA_Gazetter_SelectedColumns %>%
filter(State == "CA") %>%
filter(Latitude_DEC != "") %>%
filter(Longitude_DEC != "")
View(CA_Gazetteer_CAOnly)
library(dplyr)
library(DBI)
CA_Gazetter_DB <- DBI::dbConnect(RSQLite::SQLite(), path ="gaz.db")
copy_to(CA_Gazetter_DB, CA_Gazetteer_CAOnly, "Gaz",
temporary = FALSE
)
dbGetQuery(CA_Gazetter_DB, "SELECT * FROM Gaz LIMIT 10")
dbGetQuery(CA_Gazetter_DB, "SELECT COUNT(*) FROM Gaz")
query <- "
SELECT *
FROM Gaz
LIMIT 10
"
dbGetQuery(CA_Gazetter_DB, query)
knitr::opts_chunk$set(echo = TRUE)
CA_Gazetter_DB <- DBI::dbConnect(RSQLite::SQLite(), path ="gaz.db")
copy_to(CA_Gazetter_DB, CA_Gazetteer_CAOnly, "Gaz",
temporary = FALSE
)
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(tidyverse)
library(readr)
library(tibble)
library(dplyr)
library(tidyr)
library(DBI)
Raw_CA_Gazetteer_Dataset <- read_delim("~/Documents/Bren School Documents/3-Spring Quarter 2018/ESM262-Computing for Environmental Sciences/Assignment2/CA_Features_20180401.txt",
"|", escape_double = FALSE, trim_ws = TRUE)
View(Raw_CA_Gazetteer_Dataset)
CA_Gazetteer_NewColumns <- Raw_CA_Gazetteer_Dataset
names(CA_Gazetteer_NewColumns) <- c("ID", "Name", "Class", "State", "State_ID", "County", "County_ID", "Latitude_DMS", "Longitude_DMS", "Latitude_DEC", "Longitude_DEC", "Latitude_DMS_SRC", "Longitude_DMS_SRC", "Latitude_DEC_SRC", "Longitude_DEC_SRC", "Elevation_MTS", "Elevation_FT", "MapName", "DateCreated", "DateEdited")
View(CA_Gazetteer_NewColumns)
CA_Gazetter_SelectedColumns <- select(CA_Gazetteer_NewColumns, ID, Name, Class, State, County, Latitude_DEC, Longitude_DEC, Latitude_DEC_SRC, Longitude_DEC_SRC, Elevation_MTS, MapName, DateCreated, DateEdited)
View(CA_Gazetter_SelectedColumns)
#The only columns needed to change types was the dates, so I proceeded to change both dates columns.
str(CA_Gazetter_SelectedColumns)
CA_Gazetter_SelectedColumns$DateCreated <- as.Date(CA_Gazetter_SelectedColumns$DateCreated, format = "%m/%d/%Y")
CA_Gazetter_SelectedColumns$DateEdited <- as.Date(CA_Gazetter_SelectedColumns$DateEdited, format = "%m/%d/%Y")
str(CA_Gazetter_SelectedColumns)
View(CA_Gazetter_SelectedColumns)
CA_Gazetteer_CAOnly <- CA_Gazetter_SelectedColumns %>%
filter(State == "CA") %>%
filter(Latitude_DEC != "") %>%
filter(Longitude_DEC != "")
View(CA_Gazetteer_CAOnly)
getwd()
library(dplyr)
library(DBI)
CA_Gazetter_DB <- DBI::dbConnect(RSQLite::SQLite(), path ="gaz.db")
copy_to(CA_Gazetter_DB, CA_Gazetteer_CAOnly, "Gaz",
temporary = FALSE
)
query <- "
SELECT *
FROM Gaz
LIMIT 10
"
dbGetQuery(CA_Gazetter_DB, query)
query <- "
SELECT *
FROM Gaz
LIMIT 10
"
dbGetQuery(CA_Gazetter_DB, query)
dbDisconnect(CA_Gazetter_DB)
CA_Gazetter_DB <- DBI::dbConnect(RSQLite::SQLite(), path ="gaz.db")
copy_to(CA_Gazetter_DB, CA_Gazetteer_CAOnly, "Gaz",
temporary = FALSE
)
"
LIMIT 10
dbGetQuery(CA_Gazetter_DB, query)
"
dbGetQuery(CA_Gazetter_DB, query)
dbDisconnect(CA_Gazetter_DB)
install.packages(sqldf)
install.packages("sqldf")
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(tidyverse)
library(readr)
library(tibble)
library(dplyr)
library(tidyr)
library(DBI)
library(sqldf)
# Import the data we want to store in the SQL database
data = read.csv("Gazetteer.csv", sep="|")
# Connect to our database
db<- dbConnect(SQLite(), dbname="gaz.db")
# Write the data to our database
dbWriteTable(db, "data", data)
# Query our database to display us the highest count of feature Name
dbGetQuery(db, 'SELECT Name FROM data GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1')
# Query our database to display us the lowest count of feature Class
dbGetQuery(db, 'SELECT Class FROM data GROUP BY Class ORDER BY COUNT(*) ASC LIMIT 1')
# Display center of each county
dbGetQuery(db, 'SELECT County, AVG(Latitude_DEC) AS
"Approximate Center Latitude", AVG(Longitude_DEC) AS
"Approximate Center Longitude" FROM data GROUP BY County')
feature.Feature FROM data LEFT JOIN feature ON data.Class = feature.Class")[,3]
# Import feature class from previous exercises and join it to our db and store the values of Man/Nature in variable feature
feature<-read.table("feature.txt", header = TRUE)
dbWriteTable(db, "feature", feature)
features<-dbGetQuery(db, "SELECT County, data.Class,
feature.Feature FROM data LEFT JOIN feature ON data.Class = feature.Class")[,3]
feature.Feature FROM data LEFT JOIN feature ON data.Class = feature.Class")[,3]
feature<-read.table("feature.txt", header = TRUE)
dbWriteTable(db, "feature", feature)
# Import feature class from previous exercises and join it to our db and store the values of Man/Nature in variable feature
feature<-read.table("feature.txt", header = TRUE)
dbWriteTable(db, "feature", feature)
features<-dbGetQuery(db, "SELECT County, data.Class,
feature.Feature FROM data LEFT JOIN feature ON data.Class = feature.Class")[,3]
features
# Display count of natural and man made features respectively
table(unlist(features))
# Display total number of natural and man made features
length(features)
# Display count of natural and man made features respectively
table(unlist(features))
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(tidyverse)
library(readr)
library(tibble)
library(dplyr)
library(tidyr)
library(DBI)
library(sqldf)
# Import the data we want to store in the SQL database
data = read.csv("Gazetteer.csv", sep="|")
# Connect to our database
db<- dbConnect(SQLite(), dbname="gaz.db")
# Write the data to our database
dbWriteTable(db, "data", data)
knitr::opts_chunk$set(echo = TRUE)
# Import the data we want to store in the SQL database
data = read.csv("CA.csv", sep="|")
# Connect to our database
db<- dbConnect(SQLite(), dbname="gaz.db")
# Write the data to our database
dbWriteTable(db, "data", data)
# Import the data we want to store in the SQL database
data = read.csv("CA.csv", sep="|")
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(tidyverse)
library(tidyverse)
library(readr)
library(tibble)
library(dplyr)
library(tidyr)
library(DBI)
library(sqldf)
# Import the data we want to store in the SQL database
data = read.csv("CA.csv", sep="|")
# Connect to our database
db<- dbConnect(SQLite(), dbname="gaz.db")
# Write the data to our database
dbWriteTable(db, "data", data)
# Query our database to display us the highest count of feature Name
dbGetQuery(db, 'SELECT Name FROM data GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1')
# Query our database to display us the lowest count of feature Class
dbGetQuery(db, 'SELECT Class FROM data GROUP BY Class ORDER BY COUNT(*) ASC LIMIT 1')
# Display center of each county
dbGetQuery(db, 'SELECT County, AVG(Latitude_DEC) AS
"Approximate Center Latitude", AVG(Longitude_DEC) AS
"Approximate Center Longitude" FROM data GROUP BY County')
View(data)
View(data)
# Display center of each county
dbGetQuery(db, 'SELECT County, AVG(lat) AS
"Approximate Center Latitude", AVG(Lon) AS
"Approximate Center Longitude" FROM data GROUP BY County')
# Import feature class from previous exercises and join it to our db and store the values of Man/Nature in variable feature
feature<-read.table("feature.txt", header = TRUE)
dbWriteTable(db, "feature", feature)
features<-dbGetQuery(db, "SELECT County, data.Class,
feature.Feature FROM data LEFT JOIN feature ON data.Class = feature.Class")[,3]
# Display count of natural and man made features respectively
table(unlist(features))
# Display total number of natural and man made features
length(features)
knitr::opts_chunk$set(echo = TRUE)
# Display center of each county
dbGetQuery(db, 'SELECT County, (MIN(lat)+MAX(lat))/2 AS
"Approximate Center Latitude", (MIN(lon)+MAX(lon))/2 AS
"Approximate Center Longitude" FROM data GROUP BY County')
# Display center of each county
dbGetQuery(db, 'SELECT County, SUM(MIN(lat)+MAX(lat))/2 AS
"Approximate Center Latitude", (MIN(lon)+MAX(lon))/2 AS
"Approximate Center Longitude" FROM data GROUP BY County')
# Display center of each county
dbGetQuery(db, 'SELECT County, SUM(MIN(lat)+MAX(lat)) AS
"Approximate Center Latitude", SUM(MIN(lon)+MAX(lon)) AS
"Approximate Center Longitude" FROM data GROUP BY County')
# Display center of each county
dbGetQuery(db, 'SELECT County, SUM (MIN(lat)+MAX(lat)) AS
"Approximate Center Latitude", SUM (MIN(lon)+MAX(lon)) AS
"Approximate Center Longitude" FROM data GROUP BY County')
# Display center of each county
dbGetQuery(db, 'SELECT County, AVG(lat) AS
"Approximate Center Latitude", AVG(lon) AS
"Approximate Center Longitude" FROM data GROUP BY County')
# Display center of each county
dbGetQuery(db, 'SELECT County, AVG(lat) AS
"Approximate Center Latitude", AVG(lon) AS
"Approximate Center Longitude" FROM data GROUP BY County')
# Display center of each county
dbGetQuery(db, 'SELECT County, AVG(Latitude_DEC) AS
"Approximate Center Latitude", AVG(Longitude_DEC) AS
"Approximate Center Longitude" FROM data GROUP BY County')
# Display center of each county
dbGetQuery(db, 'SELECT County, AVG(Lat) AS
"Approximate Center Latitude", AVG(Lon) AS
"Approximate Center Longitude" FROM data GROUP BY County')
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(tidyverse)
library(tidyverse)
library(readr)
library(tibble)
library(dplyr)
library(tidyr)
library(DBI)
library(sqldf)
# Import the data we want to store in the SQL database
data = read.csv("CA.csv", sep="|")
# Connect to our database
db<- dbConnect(SQLite(), dbname="gaz.db")
# Write the data to our database
dbWriteTable(db, "data", data)
# Query our database to display us the highest count of feature Name
dbGetQuery(db, 'SELECT Name FROM data GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1')
# Query our database to display us the lowest count of feature Class
dbGetQuery(db, 'SELECT Class FROM data GROUP BY Class ORDER BY COUNT(*) ASC LIMIT 1')
View(data)
View(data)
# Display center of each county
dbGetQuery(db, 'SELECT County, AVG(lat) AS
"Approximate Center Latitude", AVG(lon) AS
"Approximate Center Longitude" FROM data GROUP BY County')
# Import feature class from previous exercises and join it to our db and store the values of Man/Nature in variable feature
feature<-read.table("feature.txt", header = TRUE)
dbWriteTable(db, "feature", feature)
features<-dbGetQuery(db, "SELECT County, data.Class,
feature.Feature FROM data LEFT JOIN feature ON data.Class = feature.Class")[,3]
# Display count of natural and man made features respectively
table(unlist(features))
# Display total number of natural and man made features
length(features)
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(tidyverse)
library(tidyverse)
library(readr)
library(tibble)
library(dplyr)
library(tidyr)
library(DBI)
library(sqldf)
# Import the data we want to store in the SQL database
data = read.csv("CA.csv", sep="|")
# Connect to our database
db<- dbConnect(SQLite(), dbname="gaz.db")
# Write the data to our database
dbWriteTable(db, "data", data)
# Query our database to display us the highest count of feature Name
dbGetQuery(db, 'SELECT Name FROM data GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1')
# Query our database to display us the lowest count of feature Class
dbGetQuery(db, 'SELECT Class FROM data GROUP BY Class ORDER BY COUNT(*) ASC LIMIT 1')
# Display center of each county
dbGetQuery(db, 'SELECT County, (MAX(lat)+MIN(lat))/2 AS
"Approximate Center Latitude", (MAX(lon)+MIN(lon))/2 AS
"Approximate Center Longitude" FROM data GROUP BY County')
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(tidyverse)
library(tidyverse)
library(readr)
library(tibble)
library(dplyr)
library(tidyr)
library(sqldf)
# Import the data we want to store in the SQL database
data = read.csv("CA.csv", sep="|")
# Connect to our database
db<- dbConnect(SQLite(), dbname="gaz.db")
# Write the data to our database
dbWriteTable(db, "data", data)
# Query our database to display us the highest count of feature Name
dbGetQuery(db, 'SELECT Name FROM data GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1')
# Query our database to display us the lowest count of feature Class
dbGetQuery(db, 'SELECT Class FROM data GROUP BY Class ORDER BY COUNT(*) ASC LIMIT 1')
View(data)
View(data)
#Isolate the unique feature classes
classes <- dbGetQuery(db,"SELECT class FROM data
GROUP BY class
ORDER BY class;")
View(classes)
View(classes)
# Add classes to the database
copy_to(db, classes, "classes_db",
temporary = FALSE,
overwrite = TRUE
)
# Create a cookie to talk to the table
classes_db <- tbl(db, "classes_db")
View(classes_db)
View(classes_db)
# Create a new tibble that defines each class as natural or manmade
types <- mutate(classes,
Class_Type = c("Manmade", "Natural", "Natural", "Natural", "Natural", "Natural", "Natural", "Natural", "Natural", "Natural", "Manmade", "Manmade", "Manmade", "Natural", "Manmade", "Manmade", "Natural", "Manmade", "Manmade", "Natural", "Natural", "Manmade", "Manmade", "Natural", "Natural", "Natural", "Natural", "Natural", "Natural", "Manmade", "Manmade", "Natural", "Natural", "Natural", "Natural", "Natural", "Manmade", "Manmade", "Manmade", "Manmade", "Manmade", "Natural", "Natural", "Manmade", "Manmade", "Natural", "Natural", "Manmade", "Manmade", "Natural", "Manmade", "Natural", "Natural", "Natural", "Natural", "Natural", "Natural", "Manmade", "Manmade", "Manmade", "Natural", "Manmade", "Natural")
)
View(types)
View(types)
# Add types to the database
copy_to(db, types, "types_db",
temporary = FALSE,
overwrite = TRUE
)
# Create a cookie to talk to the table
types_db <- tbl(db, "types_db")
View(types_db)
View(types)
View(types)
# Join to gaz, select desired columns
class_types <- dbGetQuery(db, "SELECT data.name, data.class, data.county, types_db.Class_Type FROM data JOIN types_db ON data.class = types_db.class;")
View(class_types)
View(class_types)
# Type convert county name to a factor
class_types$county <- as.factor(class_types$county)
#Copy class_types to the database
copy_to(db, class_types, "class_types_db",
temporary = FALSE,
overwrite = TRUE
)
# Create a cookie to talk to the table
class_types_db <- tbl(db, "class_types_db")
class_types_db
# Pull the different metrics you need
manmade <- dbGetQuery(db, "SELECT county AS 'county', count(Class_Type) AS 'Manmade' FROM class_types_db WHERE Class_Type = 'Manmade' AND county != 'NA' GROUP BY county;")
View(manmade)
# Add to the database
copy_to(db, manmade, "manmade",
temporary = FALSE,
overwrite = TRUE
)
# Create a cookie to talk to the table
manmade_db <- tbl(db, "manmade_db")
# Create a cookie to talk to the table
manmade_db <- tbl(db, "manmade")
#Pull the natural metrics
natural <- dbGetQuery(db, "SELECT county AS 'county', count(Class_Type) AS 'Natural' FROM class_types_db WHERE Class_Type = 'Natural' AND county != 'NA' GROUP BY county;")
# Add to the database
copy_to(db, natural, "natural_db",
temporary = FALSE,
overwrite = TRUE
)
# Create a cookie to talk to the table
natural_db <- tbl(db, "natural_db")
View(manmade)
View(natural)
# Join these and calculate the fractions
fractions <- dbGetQuery(db, "SELECT manmade.county, CAST(manmade.Manmade AS REAL)/(manmade.Manmade + natural_db.Natural) AS 'Fraction Manmade', CAST(natural_db.Natural AS REAL)/(manmade.Manmade + natural_db.Natural) AS 'Fraction Natural' FROM manmade JOIN natural_db ON manmade.county = natural_db.county;")
fractions
# Query our database to display us the highest count of feature Name
HighestFeature <- dbGetQuery(db, 'SELECT Name FROM data GROUP BY Name ORDER BY COUNT(*) DESC LIMIT 1')
HighestFeature
# Query our database to display us the lowest count of feature Class
LowestFeature <- dbGetQuery(db, 'SELECT Class FROM data GROUP BY Class ORDER BY COUNT(*) ASC LIMIT 1')
LowestFeature
# Display center of each county
CenterCounty <- dbGetQuery(db, 'SELECT County, (MAX(lat)+MIN(lat))/2 AS
"Approximate Center Latitude", (MAX(lon)+MIN(lon))/2 AS
"Approximate Center Longitude" FROM data GROUP BY County')
CenterCounty
#Isolate the unique feature classes
classes <- dbGetQuery(db,"SELECT class FROM data
GROUP BY class
ORDER BY class;")
# Add classes to the database
copy_to(db, classes, "classes_db",
temporary = FALSE,
overwrite = TRUE
)
# Create a cookie to talk to the table
classes_db <- tbl(db, "classes_db")
# Create a new tibble that defines each class as natural or manmade
types <- mutate(classes,
Class_Type = c("Manmade", "Natural", "Natural", "Natural", "Natural", "Natural", "Natural", "Natural", "Natural", "Natural", "Manmade", "Manmade", "Manmade", "Natural", "Manmade", "Manmade", "Natural", "Manmade", "Manmade", "Natural", "Natural", "Manmade", "Manmade", "Natural", "Natural", "Natural", "Natural", "Natural", "Natural", "Manmade", "Manmade", "Natural", "Natural", "Natural", "Natural", "Natural", "Manmade", "Manmade", "Manmade", "Manmade", "Manmade", "Natural", "Natural", "Manmade", "Manmade", "Natural", "Natural", "Manmade", "Manmade", "Natural", "Manmade", "Natural", "Natural", "Natural", "Natural", "Natural", "Natural", "Manmade", "Manmade", "Manmade", "Natural", "Manmade", "Natural")
)
# Add types to the database
copy_to(db, types, "types_db",
temporary = FALSE,
overwrite = TRUE
)
# Create a cookie to talk to the table
types_db <- tbl(db, "types_db")
# Join to gaz, select desired columns
class_types <- dbGetQuery(db, "SELECT data.name, data.class, data.county, types_db.Class_Type FROM data JOIN types_db ON data.class = types_db.class;")
# Type convert county name to a factor
class_types$county <- as.factor(class_types$county)
#Copy class_types to the database
copy_to(db, class_types, "class_types_db",
temporary = FALSE,
overwrite = TRUE
)
# Create a cookie to talk to the table
class_types_db <- tbl(db, "class_types_db")
# Pull the different metrics you need
manmade <- dbGetQuery(db, "SELECT county AS 'county', count(Class_Type) AS 'Manmade' FROM class_types_db WHERE Class_Type = 'Manmade' AND county != 'NA' GROUP BY county;")
# Add to the database
copy_to(db, manmade, "manmade",
temporary = FALSE,
overwrite = TRUE
)
# Create a cookie to talk to the table
manmade_db <- tbl(db, "manmade")
#Pull the natural metrics
natural <- dbGetQuery(db, "SELECT county AS 'county', count(Class_Type) AS 'Natural' FROM class_types_db WHERE Class_Type = 'Natural' AND county != 'NA' GROUP BY county;")
# Add to the database
copy_to(db, natural, "natural_db",
temporary = FALSE,
overwrite = TRUE
)
# Create a cookie to talk to the table
natural_db <- tbl(db, "natural_db")
# Join these and calculate the fractions
fractions <- dbGetQuery(db, "SELECT manmade.county, CAST(manmade.Manmade AS REAL)/(manmade.Manmade + natural_db.Natural) AS 'Fraction Manmade', CAST(natural_db.Natural AS REAL)/(manmade.Manmade + natural_db.Natural) AS 'Fraction Natural' FROM manmade JOIN natural_db ON manmade.county = natural_db.county;")
fractions
